import javax.swing.*;
import javax.swing.border.EmptyBorder;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.text.DecimalFormat;
import java.util.List;

public class MainFrame extends JFrame {
    private WarehouseService service;

    private JList<ProductGroup> groupList;
    private DefaultListModel<ProductGroup> groupListModel;

    private JTable productTable;
    private DefaultTableModel productTableModel;

    // –ö–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –≥—Ä—É–ø–∞–º–∏ —Ç–∞ —Ç–æ–≤–∞—Ä–∞–º–∏
    private JButton addGroupBtn, editGroupBtn, deleteGroupBtn;
    private JButton addProductBtn, editProductBtn, deleteProductBtn;
    private JButton addQuantityBtn, removeQuantityBtn;
    private JButton searchBtn, statBtn;
    private JTextField searchField;

    private JLabel statusLabel;
    private JLabel totalValueLabel;

    public MainFrame() {
        service = new WarehouseService();

        setupUI();
        loadData();

        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setTitle("–ê–≤—Ç–æ–º–∞—Ç–∏–∑–æ–≤–∞–Ω–µ —Ä–æ–±–æ—á–µ –º—ñ—Å—Ü–µ - –°–∫–ª–∞–¥");
        setSize(1000, 600);
        setLocationRelativeTo(null);
    }

    private void setupUI() {
        JPanel mainPanel = new JPanel(new BorderLayout(10, 10));
        mainPanel.setBorder(new EmptyBorder(10, 10, 10, 10));

        // –õ—ñ–≤–∞ –ø–∞–Ω–µ–ª—å –∑ –≥—Ä—É–ø–∞–º–∏
        JPanel leftPanel = new JPanel(new BorderLayout(5, 5));
        leftPanel.setBorder(BorderFactory.createTitledBorder("–ì—Ä—É–ø–∏ —Ç–æ–≤–∞—Ä—ñ–≤"));

        groupListModel = new DefaultListModel<>();
        groupList = new JList<>(groupListModel);
        groupList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        groupList.addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                if (!e.getValueIsAdjusting()) {
                    loadProductsForSelectedGroup();
                }
            }
        });

        JScrollPane groupScrollPane = new JScrollPane(groupList);
        leftPanel.add(groupScrollPane, BorderLayout.CENTER);

        JPanel groupButtonPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));

        addGroupBtn = createTextButton("‚ûï –î–æ–¥–∞—Ç–∏", e -> addGroup());
        editGroupBtn = createTextButton("‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏", e -> editGroup());
        deleteGroupBtn = createTextButton("üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏", e -> deleteGroup());

        groupButtonPanel.add(addGroupBtn);
        groupButtonPanel.add(editGroupBtn);
        groupButtonPanel.add(deleteGroupBtn);

        leftPanel.add(groupButtonPanel, BorderLayout.SOUTH);

        // –ü—Ä–∞–≤–∞ –ø–∞–Ω–µ–ª—å –∑ —Ç–æ–≤–∞—Ä–∞–º–∏
        JPanel rightPanel = new JPanel(new BorderLayout(5, 5));
        rightPanel.setBorder(BorderFactory.createTitledBorder("–¢–æ–≤–∞—Ä–∏"));

        // –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ñ —Ç–æ–≤–∞—Ä—ñ–≤
        String[] columnNames = {"–ù–∞–∑–≤–∞", "–û–ø–∏—Å", "–í–∏—Ä–æ–±–Ω–∏–∫", "–ö—ñ–ª—å–∫—ñ—Å—Ç—å", "–¶—ñ–Ω–∞", "–í–∞—Ä—Ç—ñ—Å—Ç—å"};
        productTableModel = new DefaultTableModel(columnNames, 0) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };

        productTable = new JTable(productTableModel);
        productTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        productTable.setAutoCreateRowSorter(true);

        JScrollPane productScrollPane = new JScrollPane(productTable);
        rightPanel.add(productScrollPane, BorderLayout.CENTER);

        JPanel productButtonPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));

        addProductBtn = createTextButton("‚ûï –î–æ–¥–∞—Ç–∏", e -> addProduct());
        editProductBtn = createTextButton("‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏", e -> editProduct());
        deleteProductBtn = createTextButton("üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏", e -> deleteProduct());
        addQuantityBtn = createTextButton("üì• –î–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä", e -> addQuantity());
        removeQuantityBtn = createTextButton("üì§ –ü—Ä–∏–±—Ä–∞—Ç–∏ —Ç–æ–≤–∞—Ä", e -> removeQuantity());

        productButtonPanel.add(addProductBtn);
        productButtonPanel.add(editProductBtn);
        productButtonPanel.add(deleteProductBtn);
        productButtonPanel.add(new JSeparator(JSeparator.VERTICAL));
        productButtonPanel.add(addQuantityBtn);
        productButtonPanel.add(removeQuantityBtn);

        rightPanel.add(productButtonPanel, BorderLayout.SOUTH);

        // –í–µ—Ä—Ö–Ω—è –ø–∞–Ω–µ–ª—å –∑ –ø–æ—à—É–∫–æ–º
        JPanel topPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));

        searchField = new JTextField(20);
        searchField.addKeyListener(new KeyAdapter() {
            @Override
            public void keyPressed(KeyEvent e) {
                if (e.getKeyCode() == KeyEvent.VK_ENTER) {
                    searchProducts();
                }
            }
        });

        searchBtn = createTextButton("üîç –ü–æ—à—É–∫", e -> searchProducts());
        statBtn = createTextButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", e -> showStatistics());

        topPanel.add(new JLabel("–ü–æ—à—É–∫: "));
        topPanel.add(searchField);
        topPanel.add(searchBtn);
        topPanel.add(new JSeparator(JSeparator.VERTICAL));
        topPanel.add(statBtn);

        // –ù–∏–∂–Ω—è –ø–∞–Ω–µ–ª—å –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º
        JPanel bottomPanel = new JPanel(new BorderLayout());

        statusLabel = new JLabel("–ì–æ—Ç–æ–≤–æ");
        totalValueLabel = new JLabel("–ó–∞–≥–∞–ª—å–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å: 0.00 –≥—Ä–Ω");

        bottomPanel.add(statusLabel, BorderLayout.WEST);
        bottomPanel.add(totalValueLabel, BorderLayout.EAST);

        // –î–æ–¥–∞—î–º–æ –≤—Å—ñ –ø–∞–Ω–µ–ª—ñ –¥–æ –≥–æ–ª–æ–≤–Ω–æ—ó
        JSplitPane splitPane = new JSplitPane(JSplitPane.HORIZONTAL_SPLIT, leftPanel, rightPanel);
        splitPane.setDividerLocation(300);

        mainPanel.add(topPanel, BorderLayout.NORTH);
        mainPanel.add(splitPane, BorderLayout.CENTER);
        mainPanel.add(bottomPanel, BorderLayout.SOUTH);

        add(mainPanel);
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–Ω–æ–ø–æ–∫ 
    private JButton createTextButton(String text, java.awt.event.ActionListener listener) {
        JButton button = new JButton(text);
        button.addActionListener(listener);
        return button;
    }

    private void loadData() {
        groupListModel.clear();

        List<ProductGroup> groups = service.getAllGroups();
        for (ProductGroup group : groups) {
            groupListModel.addElement(group);
        }

        updateTotalValue();
        statusLabel.setText("–î–∞–Ω—ñ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ");
    }

    private void loadProductsForSelectedGroup() {
        productTableModel.setRowCount(0);

        ProductGroup selectedGroup = groupList.getSelectedValue();
        if (selectedGroup != null) {
            DecimalFormat df = new DecimalFormat("#,##0.00");

            List<Product> products = service.getProductsByGroup(selectedGroup.getName());
            for (Product product : products) {
                productTableModel.addRow(new Object[]{
                        product.getName(),
                        product.getDescription(),
                        product.getManufacturer(),
                        product.getQuantity(),
                        df.format(product.getPrice()),
                        df.format(product.getTotalValue())
                });
            }

            statusLabel.setText("–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ —Ç–æ–≤–∞—Ä—ñ–≤: " + products.size());
        }
    }

    private void updateTotalValue() {
        DecimalFormat df = new DecimalFormat("#,##0.00");
        double totalValue = service.getTotalWarehouseValue();
        totalValueLabel.setText("–ó–∞–≥–∞–ª—å–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å: " + df.format(totalValue) + " –≥—Ä–Ω");
    }

    private void editGroup() {
        ProductGroup selectedGroup = groupList.getSelectedValue();

        if (selectedGroup != null) {
            GroupDialog dialog = new GroupDialog(this, selectedGroup);
            ProductGroup updatedGroup = dialog.showDialog();

            if (updatedGroup != null) {
                String oldName = selectedGroup.getName();
                boolean success = service.updateGroup(oldName, updatedGroup);

                if (success) {
                    // –û–Ω–æ–≤–ª—é—î–º–æ —Å–ø–∏—Å–æ–∫
                    loadData();

                    // –í–∏–±–∏—Ä–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω—É –≥—Ä—É–ø—É
                    for (int i = 0; i < groupListModel.size(); i++) {
                        if (groupListModel.get(i).getName().equals(updatedGroup.getName())) {
                            groupList.setSelectedIndex(i);
                            break;
                        }
                    }

                    statusLabel.setText("–ì—Ä—É–ø–∞ —Ç–æ–≤–∞—Ä—ñ–≤ –æ–Ω–æ–≤–ª–µ–Ω–∞: " + updatedGroup.getName());
                } else {
                    JOptionPane.showMessageDialog(this,
                            "–ì—Ä—É–ø–∞ –∑ —Ç–∞–∫–æ—é –Ω–∞–∑–≤–æ—é –≤–∂–µ —ñ—Å–Ω—É—î!",
                            "–ü–æ–º–∏–ª–∫–∞",
                            JOptionPane.ERROR_MESSAGE);
                }
            }
        } else {
            JOptionPane.showMessageDialog(this,
                    "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å –≥—Ä—É–ø—É –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è",
                    "–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è",
                    JOptionPane.INFORMATION_MESSAGE);
        }
    }
    private void addGroup() {
        GroupDialog dialog = new GroupDialog(this, null);
        ProductGroup newGroup = dialog.showDialog();

        if (newGroup != null) {
            boolean success = service.addGroup(newGroup);

            if (success) {
                groupListModel.addElement(newGroup);
                statusLabel.setText("–ì—Ä—É–ø–∞ —Ç–æ–≤–∞—Ä—ñ–≤ –¥–æ–¥–∞–Ω–∞: " + newGroup.getName());
                updateTotalValue();
            } else {
                JOptionPane.showMessageDialog(this,
                        "–ì—Ä—É–ø–∞ –∑ —Ç–∞–∫–æ—é –Ω–∞–∑–≤–æ—é –≤–∂–µ —ñ—Å–Ω—É—î!",
                        "–ü–æ–º–∏–ª–∫–∞",
                        JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    private void deleteGroup() {
        ProductGroup selectedGroup = groupList.getSelectedValue();

        if (selectedGroup != null) {
            int confirm = JOptionPane.showConfirmDialog(this,
                    "–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ –≥—Ä—É–ø—É \"" + selectedGroup.getName() + "\"?\n" +
                            "–í—Å—ñ —Ç–æ–≤–∞—Ä–∏ –≤ —Ü—ñ–π –≥—Ä—É–ø—ñ —Ç–∞–∫–æ–∂ –±—É–¥—É—Ç—å –≤–∏–¥–∞–ª–µ–Ω—ñ.",
                    "–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è",
                    JOptionPane.YES_NO_OPTION);

            if (confirm == JOptionPane.YES_OPTION) {
                boolean success = service.deleteGroup(selectedGroup.getName());

                if (success) {
                    groupListModel.removeElement(selectedGroup);
                    productTableModel.setRowCount(0);
                    statusLabel.setText("–ì—Ä—É–ø–∞ —Ç–æ–≤–∞—Ä—ñ–≤ –≤–∏–¥–∞–ª–µ–Ω–∞: " + selectedGroup.getName());
                    updateTotalValue();
                }
            }
        } else {
            JOptionPane.showMessageDialog(this,
                    "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å –≥—Ä—É–ø—É –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è",
                    "–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è",
                    JOptionPane.INFORMATION_MESSAGE);
        }
    }

    private void addProduct() {
        ProductGroup selectedGroup = groupList.getSelectedValue();

        if (selectedGroup != null) {
            ProductDialog dialog = new ProductDialog(this, null, selectedGroup.getName());
            Product newProduct = dialog.showDialog();

            if (newProduct != null) {
                boolean success = service.addProduct(newProduct);

                if (success) {
                    loadProductsForSelectedGroup();
                    statusLabel.setText("–¢–æ–≤–∞—Ä –¥–æ–¥–∞–Ω–∏–π: " + newProduct.getName());
                    updateTotalValue();
                } else {
                    JOptionPane.showMessageDialog(this,
                            "–¢–æ–≤–∞—Ä –∑ —Ç–∞–∫–æ—é –Ω–∞–∑–≤–æ—é –≤–∂–µ —ñ—Å–Ω—É—î!",
                            "–ü–æ–º–∏–ª–∫–∞",
                            JOptionPane.ERROR_MESSAGE);
                }
            }
        } else {
            JOptionPane.showMessageDialog(this,
                    "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å –≥—Ä—É–ø—É –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É",
                    "–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è",
                    JOptionPane.INFORMATION_MESSAGE);
        }
    }

    private void editProduct() {
        int selectedRow = productTable.getSelectedRow();

        if (selectedRow >= 0) {
            // –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω–¥–µ–∫—Å –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è
            int modelRow = productTable.convertRowIndexToModel(selectedRow);
            String productName = (String) productTableModel.getValueAt(modelRow, 0);
            Product product = service.getProductByName(productName);

            if (product != null) {
                ProductDialog dialog = new ProductDialog(this, product, product.getGroupName());
                Product updatedProduct = dialog.showDialog();

                if (updatedProduct != null) {
                    String oldName = product.getName();
                    boolean success = service.updateProduct(oldName, updatedProduct);

                    if (success) {
                        loadProductsForSelectedGroup();
                        statusLabel.setText("–¢–æ–≤–∞—Ä –æ–Ω–æ–≤–ª–µ–Ω–æ: " + updatedProduct.getName());
                        updateTotalValue();
                    } else {
                        JOptionPane.showMessageDialog(this,
                                "–¢–æ–≤–∞—Ä –∑ —Ç–∞–∫–æ—é –Ω–∞–∑–≤–æ—é –≤–∂–µ —ñ—Å–Ω—É—î!",
                                "–ü–æ–º–∏–ª–∫–∞",
                                JOptionPane.ERROR_MESSAGE);
                    }
                }
            }
        } else {
            JOptionPane.showMessageDialog(this,
                    "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å —Ç–æ–≤–∞—Ä –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è",
                    "–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è",
                    JOptionPane.INFORMATION_MESSAGE);
        }
    }

    private void deleteProduct() {
        int selectedRow = productTable.getSelectedRow();

        if (selectedRow >= 0) {
            // –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω–¥–µ–∫—Å –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è
            int modelRow = productTable.convertRowIndexToModel(selectedRow);
            String productName = (String) productTableModel.getValueAt(modelRow, 0);

            int confirm = JOptionPane.showConfirmDialog(this,
                    "–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ —Ç–æ–≤–∞—Ä \"" + productName + "\"?",
                    "–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è",
                    JOptionPane.YES_NO_OPTION);

            if (confirm == JOptionPane.YES_OPTION) {
                boolean success = service.deleteProduct(productName);

                if (success) {
                    loadProductsForSelectedGroup();
                    statusLabel.setText("–¢–æ–≤–∞—Ä –≤–∏–¥–∞–ª–µ–Ω–æ: " + productName);
                    updateTotalValue();
                }
            }
        } else {
            JOptionPane.showMessageDialog(this,
                    "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å —Ç–æ–≤–∞—Ä –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è",
                    "–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è",
                    JOptionPane.INFORMATION_MESSAGE);
        }
    }

    private void addQuantity() {
        int selectedRow = productTable.getSelectedRow();

        if (selectedRow >= 0) {
            int modelRow = productTable.convertRowIndexToModel(selectedRow);
            String productName = (String) productTableModel.getValueAt(modelRow, 0);

            String input = JOptionPane.showInputDialog(this,
                    "–í–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—É \"" + productName + "\" –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è:",
                    "–ü—Ä–∏—Ö—ñ–¥ —Ç–æ–≤–∞—Ä—É",
                    JOptionPane.QUESTION_MESSAGE);

            if (input != null && !input.trim().isEmpty()) {
                try {
                    int quantity = Integer.parseInt(input.trim());

                    if (quantity > 0) {
                        boolean success = service.addProductQuantity(productName, quantity);

                        if (success) {
                            loadProductsForSelectedGroup();
                            statusLabel.setText("–î–æ–¥–∞–Ω–æ " + quantity + " –æ–¥. —Ç–æ–≤–∞—Ä—É: " + productName);
                            updateTotalValue();
                        }
                    } else {
                        JOptionPane.showMessageDialog(this,
                                "–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ –±—ñ–ª—å—à–µ –Ω—É–ª—è!",
                                "–ü–æ–º–∏–ª–∫–∞",
                                JOptionPane.ERROR_MESSAGE);
                    }
                } catch (NumberFormatException e) {
                    JOptionPane.showMessageDialog(this,
                            "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ —á–∏—Å–ª–æ!",
                            "–ü–æ–º–∏–ª–∫–∞",
                            JOptionPane.ERROR_MESSAGE);
                }
            }
        } else {
            JOptionPane.showMessageDialog(this,
                    "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å —Ç–æ–≤–∞—Ä –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ",
                    "–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è",
                    JOptionPane.INFORMATION_MESSAGE);
        }
    }

    private void removeQuantity() {
        int selectedRow = productTable.getSelectedRow();

        if (selectedRow >= 0) {
            int modelRow = productTable.convertRowIndexToModel(selectedRow);
            String productName = (String) productTableModel.getValueAt(modelRow, 0);

            String input = JOptionPane.showInputDialog(this,
                    "–í–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—É \"" + productName + "\" –¥–ª—è –≤—ñ–¥–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è:",
                    "–í—ñ–¥–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É",
                    JOptionPane.QUESTION_MESSAGE);

            if (input != null && !input.trim().isEmpty()) {
                try {
                    int quantity = Integer.parseInt(input.trim());

                    if (quantity > 0) {
                        boolean success = service.removeProductQuantity(productName, quantity);

                        if (success) {
                            loadProductsForSelectedGroup();
                            statusLabel.setText("–í—ñ–¥–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ " + quantity + " –æ–¥. —Ç–æ–≤–∞—Ä—É: " + productName);
                            updateTotalValue();
                        } else {
                            JOptionPane.showMessageDialog(this,
                                    "–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ —Ç–æ–≤–∞—Ä—É –Ω–∞ —Å–∫–ª–∞–¥—ñ!",
                                    "–ü–æ–º–∏–ª–∫–∞",
                                    JOptionPane.ERROR_MESSAGE);
                        }
                    } else {
                        JOptionPane.showMessageDialog(this,
                                "–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ –±—ñ–ª—å—à–µ –Ω—É–ª—è!",
                                "–ü–æ–º–∏–ª–∫–∞",
                                JOptionPane.ERROR_MESSAGE);
                    }
                } catch (NumberFormatException e) {
                    JOptionPane.showMessageDialog(this,
                            "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ —á–∏—Å–ª–æ!",
                            "–ü–æ–º–∏–ª–∫–∞",
                            JOptionPane.ERROR_MESSAGE);
                }
            }
        } else {
            JOptionPane.showMessageDialog(this,
                    "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å —Ç–æ–≤–∞—Ä –¥–ª—è –≤—ñ–¥–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è",
                    "–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è",
                    JOptionPane.INFORMATION_MESSAGE);
        }
    }

    private void searchProducts() {
        String query = searchField.getText().trim();

        if (!query.isEmpty()) {
            List<Product> results = service.searchProducts(query);

            productTableModel.setRowCount(0);
            DecimalFormat df = new DecimalFormat("#,##0.00");

            for (Product product : results) {
                productTableModel.addRow(new Object[]{
                        product.getName(),
                        product.getDescription(),
                        product.getManufacturer(),
                        product.getQuantity(),
                        df.format(product.getPrice()),
                        df.format(product.getTotalValue())
                });
            }

            // –ó–Ω—ñ–º–∞—î–º–æ –≤–∏–¥—ñ–ª–µ–Ω–Ω—è –∑ –≥—Ä—É–ø–∏
            groupList.clearSelection();

            statusLabel.setText("–ó–Ω–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä—ñ–≤: " + results.size());
        } else {
            // –Ø–∫—â–æ –ø–æ—à—É–∫–æ–≤–∏–π –∑–∞–ø–∏—Ç –ø–æ—Ä–æ–∂–Ω—ñ–π, –≤—ñ–¥–Ω–æ–≤–ª—é—î–º–æ –≤–∏–±—Ä–∞–Ω—É –≥—Ä—É–ø—É
            ProductGroup selectedGroup = groupList.getSelectedValue();
            if (selectedGroup != null) {
                loadProductsForSelectedGroup();
            } else {
                productTableModel.setRowCount(0);
            }
        }
    }

    private void showStatistics() {
        StatisticsDialog dialog = new StatisticsDialog(this, service);
        dialog.setVisible(true);
    }
}
